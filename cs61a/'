<a name="top"></a>
## Table of Contents
<ul>
    <li><a href="#useful_command">Useful Command</a></li>
    <li><a href="#expressions">Expressions</a></li>
    <li><a href="#functions">Functions</a>        
        <ul>
            <li><a href="#environment_diagrams">Environment Diagrams</a></li>
            <li><a href="#funcs">Functions</a></li>
        </ul>
    </li>
    <li><a href="#testing">Testing</a></li>
    <li><a href="#control">Control</a></li>
    <li><a href="#lambda">Lambda</a></li>
    <li><a href="#higher_order_funcs">Higher order Functions</a></li>
    <li><a href="#recursive_functions">Recursive Functions</a></li>
    <li><a href="#data_abstraction">Data Abstraction</a></li>
    <li><a href="#built-in_types">Built-in Types</a></li>
    <li><a href="#trees">Trees</a></li>

    <li><a href="#week1_miscellaneous">week1 miscellaneous</a></LI>
</ul>

<a name="useful_command"></a>
## useful commands

```python
python3 -i lab00.py         //open interactive shell with this module
python3 -m doctest lab00.py //run doctests inside the file

//doctest example
"""
>>> twenty_nineteen()
2019
"""


```

<a name="expressions"></a>
## Expressions

```python
shakes = open('shakespeare.txt')    //open file
text = shakes.read().split()       
text.count('the')                   //count the number of apperence 'the'
words = set(text)
'the' in words                      //the value is a boolean 'True'

'draw'[::-1]                        //reverse the word ward
w = "the"
words = set(open('/usr/share/dict/words').read().split())   //open the default dictionary in mac
{w for w in words if w[::-1] == w and len(w) == 4}          //evaluated to a list of palindrome

7//4    //divide 7 by 4 and floor the result

```

<a href="#top">return to the top</a>


<a name="functions"></a>
## Functions

```python
ctrl+l //clear the screen

from math import pi
from math import sin
sin(pi/2)

f = max
f(1,2,3)    //return 3

from operator import add, mul
```

#### Ways to bind a name
- import
- assignment
- def statement

"def" statement e.g.
```python
def square(x):
    return mul(x, x)
```

#### Types of Expressions
- Primitve expressions(2 add 'hello')
    - Number or Numeral (e.g. 2)
    - Name (e.g. add)
    - String (e.g. 'hello')
- Call expressions(max(2, 3))
    - operator (e.g. max)
    - operand( e.g. 2 | 3)

<a name="environment_diagrams"></a>
#### Environment Diagrams

<img src="images/1-environment-diagram.png" style="max-width:70%;"/>

#### Execution rule for assignment statements:
1. Evaluate all expressions to the right of = from left to right.
2. Bind all names to the left of = to the resulting values in the current frame.

<img src="images/2-environment-diagram-func.png" style="max-width:70%;"/>

<a name="funcs"></a>
#### Functions

#### Means of Abstraction
- Assignment
- Function definition

<img src="images/3-environment-diagram-func-def.png" style="max-width:70%;"/>

<img src="images/4-environment-diagram-global-and-local.png" style="max-width:70%;"/>
<a href="#top">return to the top</a>

<a name="testing"></a>
## Testing

#### Assertions
```python
assert fib(8) == 13, 'The 8th Fib number should be 13'
```
If the expression is
- True, nothing will happen
- False, it will cause an error, halt the execution and print the message

#### Doctests
```python
"""
>>> sum_nat(10)
55
>>> sum_nat(100)
5050
"""
```

Run Tests
1. Run all the tests
```python
>>> from doctest import testmod
>>> testmod() //run all the tests
```
2. run specific function test
```python
>>> from doctest import run_docstring_examples
>>> run_docstring_examples(sum_nat, globals(), True)    //sum_nat: function name, globals(): get global environment, True: show verbose
```

3. Run all the tests in a file
```shell
python3 -m doctest <python_source_file>
```
<a href="#top">return to the top</a>

<a name="control"></a>
## Control

#### Print
```python
print(1,2,3)
1 2 3

print(None, None)
None None

print(print(1), print(2))
1
2
None None
```

#### Miscellaneous Python Feature
```python
2013 // 10  //truediv div and ignore the reminder (floordiv)
2013 % 10   //mod(2013, 10)
```

##### Compound Statements
<img src="images/5-compound-statements.png" style="max-width:70%;"/>
<img src="images/6-compound-statements-exp.png" style="max-width:70%;"/>
<a href="#top">return to the top</a>

<a name="lambda"></a>
## Lambda

#### Lambda Expressions
```python
(lamdda x: x*x)(3)      //call lambda function with arguement 3

square = lambda x: x*x
square(4)               //return 16
```

**Difference between def ~ and lambda**
- function has a name when using def

```python
//using lambda
>>> square
<function <lambda> at 0x1003c1bf8>

//using def
>>> square
<function square at 0x10293e730>
```

<img src="images/8-lambda-def-diff.png" style="max-width:80%;"/>

<a href="#top">return to the top</a>

<a name="week1_miscellaneous"></a>
## week1 miscellaneous
```python
>>>19 and 21
21
```

- inner call goes first because operands must be evaluated before calling a function
```python
def yes(guess):
    if guess == 'yes':
        return 'yes'
    return 'no'

def go(x):
    return x + yes(x)

go(go('yes'))

"""
f global
f1 go(inside)
f2 yes
f3 go(outside)
f4 yes
"""
```

- There is no quotes for the output of print function but there is quotes if a string is returned

```python
>>> print('fuck')
fuck

>>> 'fuck'
'fuck'
```

- There is no difference between single and double quotes in python

**''(empty string), 0,  False, None means False**
- always prefer to show the latest one
- show nothing if None
- show only what evaluated 
- comparison operator(like >) has higher priorities than the keywords: and, or

```python
>>> -3 and True
True
>>> True and -3
-3

>>> False or None

>>> None or False
False

>>> True or 3
True

>>> 3 or True
3

>>> False and ''
False

>>> '' and False
''

>>> 1 or 0==0
1
```

- variables passed in as parameters can be changed directly
```python
def say(s0):
    for i in range(10):
        s0 += 1
    return s0
```

- print
```python
>>> print(10, 20)
10 20
```

<a href="#top">return to the top</a>

<a name="higher_order_funcs"></a>
## Higher-order function: 
- A function that takes a function as an arguement or returns a function
- A function's domain is the set of all inputs it might possibly take as arguments.
- A function's range is the set of output values it might possibly return.
- A function's behavior is the relationship it creates between input and output.

<img src="images/7-higher-order-functions-exp.png" style="max-width:90%;"/>

```python
#return a function
"""
>>> adder = make_adder(3)
>>> adder(4)
7
"""

def make_adder(n):
    def adder(k):
        return k + n
    return adder



>>> make_adder(1)(3)
>>> 4
```
<img src="images/9-func-in-func-environment-diagram.png" style="max-width:80%;" />

<a href="#top">return to the top</a>

<a name="recursive_functions"></a>
## Recursive Functions
- A function is called recursive if the body of that function calls itself, eighter directly or indirectly.

```python
def fact_iter(n):
    total, k = 1, 1
    while k <= n:
        total, k = total*k, k+1
    return total
```
$`n! = \prod\limits_{k=1}^n k`$

```python
def fact(n):
    if n == 0:
        return 1
    else:
        return n * fact(n - 1)  
```
<img src="images/10-recursion-env-diagram.png" style="max-width:95%;" />

#### Tree Recursion
```python
#like a true
def fib(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fib(n) + fib(n-1)
```

#### trace decorator
```python
from ucb import trace
@trace #???
def fib(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fib(n) + fib(n-1)

"""trace enable tracing for every step like:
>>> fib(0)
    fib(0):
    fib(0) -> 0
    1
"""
```

#### Mutual Recursion 
##### The Luhn Algorithm
- Used in the numbers of credit cards
- If any digit is changed, the sum won't be a multiple of 10


|original|1|3|8|7|4|3|sum|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|result|2|3|1+6=7|7|8|3|30|

- Start from the right most digit
- Double the value of every second digit
- If product is greater than 9 then sum the 2 digits
- Take the sum of all the digits, it is a multiple of 10

```python
def split(n):
    return n // 10, n % 10

def sum_digits(n):
    if n < 10:
        return n
    else:
        all_but_last, last = split(n)
        return sum_digits(all_but_last) + last

def luhn_sum(n):
    if n < 10:
        return n
    else:
        all_but_last, last = split(n)
        return last + luhn_sum_double(all_but_last)

def luhn_sum_double(n):
    all_but_last, last = split(n)
    luhn_digit = sum_digits(2 * last)
    if n < 10:
        return luhn_digit
    else:
        return luhn_sum(all_but_last) +luhn_digit
```

- Be able to convert between iteration and recursion
#### Cascade
```python
def cascade(n):
    if n < 10:
        print(n)
    else:
        print(n)
        cascade(n//10)
        print(n)
"""
>>> cascade(5)
12345
1234
123
12
1
12
123
1234
12345
"""
```
```python
def invese_cascade(n):
    grow(n)
    print(n)
    shrink(n)

def f_then_g(f, g, n):
    if n:
        f(n)
        g(n)

grow = lambda n: f_then_g(grow, print, n // 10)
shrink = lambda n: f_then_g(print, shrink, n // 10)
"""
>>> inverse_cascade(4)
1
12
123
1234
123
12
1
"""
```

#### Count Partitions

2 + 4 = 6 \
1 + 1 + 4 = 6 \
3 + 3 = 6 \
1 + 2 + 3 = 6 \
1 + 1 + 1 + 3 = 6 \
2 + 2 + 2 = 6 \
1 + 1 + 2 + 2 = 6 \
1 + 1 + 1 + 1 + 2 = 6 \
1 + 1 + 1 + 1 + 1 + 1 = 6 \

##### Divide and Conquer
- include 4
- not include 4

```python
"""
>>> count_partitions(6, 4)
9
"""

def count_partitions(n, m):
    if n == 0:
        return 1
    elif n < 0:
        return 0
    elif m == 0:    #If m reaches 0 first, it will rely on the first term to add all 1s into the cases
        return 0

    return count_partitions(n - m, m) + cout_partitions(n, m - 1)
```
<a href="#top">return to the top</a>

<a name="data_abstraction"></a>
## Data Abstraction
- Compound objects combine objects together
    - A data: a year, a month, and a day
- An abstract data type lets us manipulate compound objects as units
- Isolate two parts of any program that uses data:
    - How data are represented (as parts)
    - How data are manipulated (as units)
- Data abstraction: a methodology by which functions enforce an abstraction barrier between representation and use
- Terminology
    - ADT : Abstract Data Type
```python
import fractions import gcd
#constructor
def rational(n, d):  
    g = gcd(n, d)
    return [n//g, d//g]

#alternative way, instead of list
def rational(n, d):
    g = gcd(n, d)
    def select(name):
        if name == 'n':
            return n//g:
        elif name == 'd':
            return d//g
    return select

#selector
def numer(x):
    return x[0]

#selector:
def denom(x):
    return x[1]


def mul_rational(x, y):
    return rational(numer(x) * numer(y), denom(x) * denom(y))

def equal_rational(x, y):
    return numer(x) * denom(y) == numer(y) * denom(x)

```

#### Pairs
```python
>>> pair = [1, 2]

>>> x, y = pair #unpacking a list

>>> from operator import getitem
>>> getitem(pair 0)
1
>>> getitem(pair 1)
2
```

##### Abstraction Barriers
<img src="images/11-abstraction-barrier.png" style="max-width:80%"/>

<a href="#top">return to the top</a>

<a name="built-in_types"></a>
##Built-in Types
####Lists
```python
digits = [1, 2]
from operator import mul,add
>>> add[2, 7] + mul(digits, 2)
[2, 7, 1, 2, 1, 2]
>>> [2, 7] + digits * 2
[2, 7, 1, 2, 1, 2]
```

#### Containers
```python
>>> 1 in digits
True

>>> 1 not in digits
False

>>> [1, 7] in digits
False

>>> [1, 2] in [3, [1, 2], 4]
True
>>> [1, 2] in [3, [[1, 2]], 4]
False
```

####For Statements
```python
for <name> in <expression>:
    <suite>

#unpacking in for
for x, y in pairs:
    if x == y:
        print(1)
```

#### Range
- a sequence of consecutive integers
```python
>>> List(range(-2, 2))
[-2, -1, 0, 1]

for _ in range(3):  #Don't care about the number
    print('Go Bears!')
```

#### List Comprehensions
```python
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'm', 'n', 'o', 'p']
>>> [letters[i] for i in [3, 4, 6, 8]]
['d', 'e', 'm', 'o']

>>> odds = [1, 3, 5, 7, 9]
>>> [x+1 for x in odds if 25 % x == 0]
[2, 6]
```

#### Strings
```python
>>> exec('curry = lambda f: lambda x: lambda y: f(x, y)')
>>> curry
'curry = lambda f: lambda x: lambda y: f(x, y)'

>>> """The highness"""
'The highness'

>>> city = 'Berkeley'
>>> city[3]
'k' #no character, only string

>>> 'here'in "where's Waldo?"
True
```

#### Dictionaries
- No order at all
```python
>>> n = {'a':1, 'b':2}
>>> n.keys()
>>> n.values()
>>> n.items()

>>> items_list = [('a', 1), ('b', 2), ('c', 3)]
>>> a = dict(items_list)
>>> a['a']
1

>>> a.get['a', 0]   #default 0

>>> {x:x*x for x in range(10)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

>>> {[1]: 2} #error
```
<a href="#top">return to the top</a>

<a name="trees"></a>
## Trees
```python
>>> odds = [3, 5, 7, 9, 11]
>>> odds[:3] = [3, 5, 7]
```
** slicing creates new values


## week2 miscellaneous
- we aren't normally allowed to modify variables defined in parent frames
```python
def parent(previous_val):
    def child():
        previous_val += 1   #not allowed, will cause error
```


